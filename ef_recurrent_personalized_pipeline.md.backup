# LUXETICS  
## TOOLS|FRAMEWORKS    



**PsyToolkit**: A software package for programming psychological experiments using Linux

[PsyToolkit: A software package for programming psychological experiments](https://link.springer.com/content/pdf/10.3758/BRM.42.4.1096.pdf)

*Summary*  
**Software includes:**  


1. A high-level scripting language, a library for the programming language C, and a questionnaire presenter.  
2. Integraion with statistical software package R. PsyToolkit
3. Support for external hardware (including IoLab and Cedrus response keyboards and two common digital input/output boards) and to support millisecond timing precision, which is essential for Cogni.



***Hypothesis***  
The flanker task, also known as the Eriksen flanker task, was designed in the early 1970s by Eriksen and Eriksen. 
  
*The basic effect is that when you need to respond to stimuli "flanked" by irrelevant stimuli, the irrelevant stimuli can still affect your response.*






## METHOD | IMPLEMENTATION 

The flanker task proposed is slightly different from the original flanker task from Eriksen and Eriksen (1974) better suited for Luxetic's purpose.


**Rules**
In this task, you need to respond with the A or L key of your keyboard. This matches the original task’s left or right lever press (A and L are left and right on the keyboard, respectively).











## DEMO 

[Eriksen flanker task](https://github.com/EXYNOS-999/luxetics/blob/master/experiment_flanker.html)

*Details* 

5 letters appear above the fixation point, but you must only respond to the central letter (which is above the fixation point). The letters X and C need to be responded to with the A button of your keyboard. The letters V and B need to be responded to with the L button of your keyboard. If there is a mismatch between the flanking letters their response and the response required by the central letter, we speak of a "incongruent" or "incompatible" condition.





*Data output file*

The save line of the PsyToolkit experiment script determines what is being saved in the data output file. Typically, for each experimental trial, you would have exactly one line in your text file, and each number/word on that line gives you the information you need for your data analysis, such as the condition, response speed, and whether an error was made.

Output format:

**Column**        |   **Meaning**     

1   			  |stimulus text    
2             | 1 = congruent ; 0 = incongruent     
3             | status (1=correct, 2=error, 3=too slow)     
4             |	the response time (ms)




## DATA ANALYSIS 

average score (e.g., average response time or error rate) the participant in each condition, and analyze those data further.

If the participant carries out the same conditions, "repeated measures" analysis on the dependent variable.

Alternatively, you can analyze the data of the participants in more detail before entering their data into the group analysis.


Personal Preference for data analysis: https://www.r-project.org 

[Example of data analysis](https://github.com/EXYNOS-999/luxetics/blob/master/rstudio-screenshot.png)











##  OTHER EXPMPLES OF COGSCI TESTS 
Inhibition Of Return
Inhibition Of Return is the phenomenon that people respond slower to a stimulus which occurs at the same position as a target. The phenomenon was first described by Michael Posner.

In the following experiment, we have the following sequence of events:

Two yellow frames, left and right of a fixation cross are simultaneously presented
One of the two frames flashes. This should attract the attention to either the left of the right. This is called the IOR Cue.
About a second later, within one of the two frames, a white dot appears (i.e., the IOR target), which requires an immediate left or right button press (left or right shift button)


# File: examples/ior/ior2.psy

# example script doing an inhibition of return experiment
# everything following a hash mark is a comment and is ignored
# by the script interpreter

options
 window     # remove this if you want to run full screen
 escape     # you can escape the program
 bitmapdir  bitmaps # directory where to find bitmaps
 origin topleft

bitmaps      # define some bitmap names
 frame       # if bitmaps have png extension, you do not need to specify
 plus        # the whole file name. 
 dot         
 instruction 

table standard    # table with 5 columns, which can be address with @-sign
#1                             #2 #3  #4   #5
#--------------------------------------------
 "cueleft  targetleft  cued"   2  200 200  1 
 "cueleft  targetright uncued" 2  200 600  2 
 "cueright targetleft  uncued" 3  600 200  1 
 "cueright targetright cued"   3  600 600  2 

task ior
 table standard               # use this table for choosing conditions
 keys lshift rshift           # use 2 shift keys in this experiment
 draw off                     # hold off drawing                   
 show bitmap plus             # 1
 show bitmap frame 200 300    # 2
 show bitmap frame 600 300    # 3
 draw on                      # now draw all three items
 delay 1500                   # wait 1500 ms
 clear @2                     # IOR cue; frame OFF attract attention
 delay 100                    # wait 100 ms
 show bitmap frame @3 300     # 4 ; frame ON again, still attacts attention
 delay 860                    # wait 860 ms
 show bitmap dot @4 300       # 5 ; show IOR target
 readkey @5 1500              # wait max 1500 ms until correct key is pressed
 clear 5                      # remove target from screen
 save BLOCKNAME @1 STATUS RT  # save trial information

message instruction           # show instruction, and wait for space key press

block training                # training block
 tasklist                     
  ior 2                       # choose the ior task 5 times
 end
 system R CMD BATCH create-feedback.r
 bitmap_from_file feedback.png
 wait_for_key

block main 5                   # 5 blocks of 10 trials
 tasklist                     
  ior 2                       # choose the ior task 5 times
 end
 system R CMD BATCH create-feedback.r
 bitmap_from_file feedback.png
 wait_for_key

*Analyze the data of a single subject*









## SCRIPTS FOR MEASURING RESPONSE TIME



**Eriksen flanker task**

		table mytable
	  "red rectangle"   1 255 0   
	  "green rectangle" 2 0   255
	
	task simpletask
	  table mytable
	  keys b n
	  delay 100
	  show rectangle 0 0 100 100  @3 @4 0
	  readkey @2 2000
	  clear 1
	  save @1 STATUS RT 
	
	block firstblock
	  tasklist
	    simpletask 10
	  end
		 
		 
		 

## Other Experiments

	Deary-Liewald Task
	
	Stroop Task
	
	Stimulus-Response Compatibility, Simon Task
	
	Mental Rotation Task
	
	Visual search
	
	N-back task (2 back)
	
	Task-switching paradigm (alternating runs version)
	
	Task-switching paradigm (cued version)
	
	Multitasking
	
	Wisconsin Card Sorting Task
	
	Fitts’s Law
	
	Cueing, Posner Task
	
	Inhibition Of Return (IOR)
	
	Endogenous vs exogenous cueing
	
	Lexical Decision Task
	
	ABBA task (reversed compatibility)
	
	Eriksen Flanker Task
	
	Attentional blink paradigm
	
	Implicit Association Task (IAT)
	
	Go/No-go task
	
	Stop signal task
	
	Psychological Refractory Period paradigm
	
	Negative Priming
	
	Navon task
	
	Corsi block test (short term memory measure)
	
	Corsi backward block test (short term memory measure)
	
	Iowa Gambling Task
	
	Mackworth Clock Task (vigilance)
	
	Visual Approach/Avoidance by the Self Task (VAAST) with words
	
	Visual Approach/Avoidance by the Self Task (VAAST) with images
	









## Whats Next/ Possible?

* Program a cognitive psychological experiment  
* Set up an online questionnaire/survey  
* Embed experiments in questionnaires/surveys  
* Run online studies  
